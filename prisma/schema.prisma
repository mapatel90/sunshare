// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles model
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  status    Int      @default(1)
  is_deleted  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("roles")
}

// Users model
model User {
  id          Int       @id @default(autoincrement())
  userRole    Int       @map("user_role") @default(3)
  username    String    @unique @db.VarChar(150)
  firstName   String    @map("first_name") @db.VarChar(100)
  lastName    String    @map("last_name") @db.VarChar(100)
  email       String    @db.VarChar(150)
  phoneNumber String?   @map("phone_number") @db.VarChar(20)
  password    String    @db.VarChar(255)
  address1    String?   @map("address_1") @db.VarChar(255)
  address2    String?   @map("address_2") @db.VarChar(255)
  cityId      Int?      @map("city_id")
  stateId     Int?      @map("state_id")
  countryId   Int?      @map("country_id")
  zipcode     String?   @db.VarChar(20)
  status      Int       @default(0)
  is_deleted  Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  city        City?     @relation("UserCity", fields: [cityId], references: [id])
  state       State?    @relation("UserState", fields: [stateId], references: [id])
  country     Country?  @relation("UserCountry", fields: [countryId], references: [id])
  projects    Project[]

  @@map("users")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(255)
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("settings")
}

// Location models
model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  code      String   @unique @db.VarChar(5) // ISO country code
  status    Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  states    State[]
  users     User[]   @relation("UserCountry")
  projects  Project[]
  
  @@map("countries")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  code      String?  @db.VarChar(10) // State code
  countryId Int      @map("country_id")
  status    Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities    City[]
  users     User[]   @relation("UserState")
  projects  Project[]
  
  @@unique([name, countryId])
  @@map("states")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  stateId   Int      @map("state_id")
  status    Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  users     User[]   @relation("UserCity")
  projects  Project[]
  
  @@unique([name, stateId])
  @@map("cities")
}

model InverterType {
  id        Int      @id @default(autoincrement())
  type      String   @unique @db.VarChar(255)
  status    Int      @default(1)

  inverters Inverter[]
  @@map("inverter_type")
}

model Inverter {
  id          Int      @id @default(autoincrement())
  companyName String   @map("company_name") @db.VarChar(255)
  inverterName String  @map("inverter_name") @db.VarChar(255)
  inverter_type_id        Int   @map("inverter_type_id")
  apiKey      String   @map("api_key") @db.VarChar(1000)
  secretKey   String   @map("secret_key") @db.VarChar(1000)
  status      Int      @default(1)
  api_status  Int      @default(1)
  is_deleted  Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  inverterType    InverterType  @relation(fields: [inverter_type_id], references: [id])

  @@map("inverters")
}

model Project {
  id               Int       @id @default(autoincrement())
  offtaker_id      Int
  project_name     String    @db.VarChar(255)
  project_type     String    @db.VarChar(255)
  address1         String?   @map("address_1") @db.VarChar(255)
  address2         String?   @map("address_2") @db.VarChar(255)
  cityId           Int?      @map("city_id")
  stateId          Int?      @map("state_id")
  countryId        Int?      @map("country_id")
  zipcode          String?   @db.VarChar(20)
  investor_profit  String    @db.VarChar(255)
  weshare_profit   String    @db.VarChar(255)
  status           Int       @default(0)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  city             City?     @relation(fields: [cityId], references: [id])
  state            State?    @relation(fields: [stateId], references: [id])
  country          Country?  @relation(fields: [countryId], references: [id])
  offtaker         User      @relation(fields: [offtaker_id], references: [id])

  @@map("projects")
}
